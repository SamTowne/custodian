name: 'Deploy Processor Service'
permissions:
  id-token: write # required to use OIDC authentication
  contents: read # required to checkout the code from the repo

env:
  SERVICE_NAME: processor
  S3_BUCKET_NAME: cloud-custodian-lambda-packages-272773485930

on:
  push:
    branches:
      - main
      - dev
    paths:
      - services/processor/**
  pull_request:
    branches:
      - main
      - dev
    paths:
      - services/processor/**
  
jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Get Environment
      id: get_env
      run: |
        prod="{{ github.event.pull_request.base.ref == 'main'  || github.ref == 'refs/head/main' }}"
        if [ "$prod" = true ]; then
          echo setting infrastructure environment to prod
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo setting infrastructure environment to dev
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        cat $GITHUB_OUTPUT
    - uses: actions/setup-python@v2
      with:
        python-version: "3.9.16"
    - name: Build Lambda Package
      run: |
        echo "building $SERVICE_NAME lambda package(s)..."
        mkdir app
        mkdir app/build
        pip install --target app/build/python --verbose --no-cache-dir c7n --upgrade
        echo "c7n installed..."
        ls -lsta app/build/python
        cp -r services/$SERVICE_NAME/* app/build/python
        echo "lambda package contents..."
        ls -lsta app/build/python
        echo "compressing package contents..."
        zip -r app.zip app/build/python
      
    - name: Configure AWS Credentials
      if: ${{ !github.event.act }} # skip during local actions testing
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::272773485930:role/custodian-272773485930-github-oidc
        aws-region: us-west-2
        role-duration-seconds: 900
    
    - name: Upload Lambda Package
      run: |
        echo "Uploading $SERVICE_NAME lambda package..."
        pip install awscli
        aws s3 cp app.zip s3://$S3_BUCKET_NAME/lambda_packages/$SERVICE_NAME/${{ steps.get_env.outputs.environment }}/app.zip --region us-west-2
